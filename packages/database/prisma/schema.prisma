// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Example model - you can modify or add more models as needed
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  events   Event[]
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id                String   @id @default(cuid())
  title             String
  shortSummary      String?  @db.Text
  description       String?  @db.Text
  startDate         DateTime
  endDate           DateTime
  timezone          String   @default("GMT -5")
  isRecurringSeries Boolean  @default(false)

  // Location details
  location  String?
  venueName String?

  // Features
  guestlistEnabled     Boolean @default(false)
  eventFeaturesEnabled Boolean @default(false)
  youtubeVideoEnabled  Boolean @default(false)
  youtubeVideoUrl      String?
  flyerImageUrl        String?
  imageGalleryEnabled  Boolean @default(false)
  imageGalleryUrls     String? @db.Text // JSON array of URLs

  // Page settings
  showOnExplore       Boolean @default(true)
  isPasswordProtected Boolean @default(false)
  eventPassword       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tickets Ticket[]

  @@index([userId])
}

model Ticket {
  id           String  @id @default(cuid())
  eventId      String
  name         String
  description  String? @db.Text
  grossPrice   Float   @default(0)
  displayPrice String  @default("Free")
  quantity     Int? // null = unlimited
  isUnlimited  Boolean @default(true)

  // Ticket settings
  limitSalesPeriod Boolean   @default(false)
  salesStartDate   DateTime?
  salesEndDate     DateTime?

  limitTicketValidity Boolean   @default(false)
  validityStartDate   DateTime?
  validityEndDate     DateTime?

  limitPurchaseQuantity Boolean @default(false)
  minPurchaseQuantity   Int?
  maxPurchaseQuantity   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}
